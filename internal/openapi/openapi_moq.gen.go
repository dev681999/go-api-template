// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package openapi

import (
	"github.com/labstack/echo/v4"
	"sync"
)

var (
	lockServerInterfaceMockLoginUser    sync.RWMutex
	lockServerInterfaceMockRegisterUser sync.RWMutex
)

// Ensure, that ServerInterfaceMock does implement ServerInterface.
// If this is not the case, regenerate this file with moq.
var _ ServerInterface = &ServerInterfaceMock{}

// ServerInterfaceMock is a mock implementation of ServerInterface.
//
//     func TestSomethingThatUsesServerInterface(t *testing.T) {
//
//         // make and configure a mocked ServerInterface
//         mockedServerInterface := &ServerInterfaceMock{
//             LoginUserFunc: func(ctx echo.Context) error {
// 	               panic("mock out the LoginUser method")
//             },
//             RegisterUserFunc: func(ctx echo.Context) error {
// 	               panic("mock out the RegisterUser method")
//             },
//         }
//
//         // use mockedServerInterface in code that requires ServerInterface
//         // and then make assertions.
//
//     }
type ServerInterfaceMock struct {
	// LoginUserFunc mocks the LoginUser method.
	LoginUserFunc func(ctx echo.Context) error

	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx echo.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// LoginUser holds details about calls to the LoginUser method.
		LoginUser []struct {
			// Ctx is the ctx argument value.
			Ctx echo.Context
		}
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx echo.Context
		}
	}
}

// LoginUser calls LoginUserFunc.
func (mock *ServerInterfaceMock) LoginUser(ctx echo.Context) error {
	if mock.LoginUserFunc == nil {
		panic("ServerInterfaceMock.LoginUserFunc: method is nil but ServerInterface.LoginUser was just called")
	}
	callInfo := struct {
		Ctx echo.Context
	}{
		Ctx: ctx,
	}
	lockServerInterfaceMockLoginUser.Lock()
	mock.calls.LoginUser = append(mock.calls.LoginUser, callInfo)
	lockServerInterfaceMockLoginUser.Unlock()
	return mock.LoginUserFunc(ctx)
}

// LoginUserCalls gets all the calls that were made to LoginUser.
// Check the length with:
//     len(mockedServerInterface.LoginUserCalls())
func (mock *ServerInterfaceMock) LoginUserCalls() []struct {
	Ctx echo.Context
} {
	var calls []struct {
		Ctx echo.Context
	}
	lockServerInterfaceMockLoginUser.RLock()
	calls = mock.calls.LoginUser
	lockServerInterfaceMockLoginUser.RUnlock()
	return calls
}

// RegisterUser calls RegisterUserFunc.
func (mock *ServerInterfaceMock) RegisterUser(ctx echo.Context) error {
	if mock.RegisterUserFunc == nil {
		panic("ServerInterfaceMock.RegisterUserFunc: method is nil but ServerInterface.RegisterUser was just called")
	}
	callInfo := struct {
		Ctx echo.Context
	}{
		Ctx: ctx,
	}
	lockServerInterfaceMockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	lockServerInterfaceMockRegisterUser.Unlock()
	return mock.RegisterUserFunc(ctx)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//     len(mockedServerInterface.RegisterUserCalls())
func (mock *ServerInterfaceMock) RegisterUserCalls() []struct {
	Ctx echo.Context
} {
	var calls []struct {
		Ctx echo.Context
	}
	lockServerInterfaceMockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	lockServerInterfaceMockRegisterUser.RUnlock()
	return calls
}
