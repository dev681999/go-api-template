// Package openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// FileType defines model for FileType.
type FileType string

// List of FileType
const (
	FileType_image FileType = "image"
	FileType_video FileType = "video"
)

// Status defines model for Status.
type Status struct {
	Message string `json:"message"`
}

// UploadFileRequest defines model for UploadFileRequest.
type UploadFileRequest struct {
	Filename string   `json:"filename"`
	Type     FileType `json:"type"`
}

// UploadFileResponse defines model for UploadFileResponse.
type UploadFileResponse struct {
	Filename     string `json:"filename"`
	Id           string `json:"id"`
	PresignedUrl string `json:"presigned_url"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus string

// List of UploadStatus
const (
	UploadStatus_failed   UploadStatus = "failed"
	UploadStatus_pending  UploadStatus = "pending"
	UploadStatus_uploaded UploadStatus = "uploaded"
)

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UserLoginResponse defines model for UserLoginResponse.
type UserLoginResponse struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Token     string `json:"token"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Address   string `json:"address"`
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	ImageUrl  string `json:"image_url"`
	LastName  string `json:"last_name"`
	Mobile    string `json:"mobile"`
}

// UserProfileUpdateRequest defines model for UserProfileUpdateRequest.
type UserProfileUpdateRequest struct {
	Address   *string `json:"address,omitempty"`
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"first_name,omitempty"`
	ImageUrl  *string `json:"image_url,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
	Mobile    *string `json:"mobile,omitempty"`
}

// UserRegistrationRequest defines model for UserRegistrationRequest.
type UserRegistrationRequest struct {
	Address   string `json:"address"`
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Mobile    string `json:"mobile"`
	Password  string `json:"password"`
}

// CreateFileJSONBody defines parameters for CreateFile.
type CreateFileJSONBody UploadFileRequest

// ActivateUserParams defines parameters for ActivateUser.
type ActivateUserParams struct {

	// The activation token
	Token *string `json:"token,omitempty"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody UserLoginRequest

// UpdateUserProfileJSONBody defines parameters for UpdateUserProfile.
type UpdateUserProfileJSONBody UserProfileUpdateRequest

// RegisterUserJSONBody defines parameters for RegisterUser.
type RegisterUserJSONBody UserRegistrationRequest

// CreateFileRequestBody defines body for CreateFile for application/json ContentType.
type CreateFileJSONRequestBody CreateFileJSONBody

// LoginUserRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// UpdateUserProfileRequestBody defines body for UpdateUserProfile for application/json ContentType.
type UpdateUserProfileJSONRequestBody UpdateUserProfileJSONBody

// RegisterUserRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody RegisterUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /storage/file)
	CreateFile(ctx echo.Context) error

	// (POST /user/activate)
	ActivateUser(ctx echo.Context, params ActivateUserParams) error

	// (POST /user/login)
	LoginUser(ctx echo.Context) error

	// (GET /user/profile)
	UserProfile(ctx echo.Context) error

	// (PATCH /user/profile)
	UpdateUserProfile(ctx echo.Context) error

	// (POST /user/register)
	RegisterUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateFile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFile(ctx)
	return err
}

// ActivateUser converts echo context to params.
func (w *ServerInterfaceWrapper) ActivateUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ActivateUserParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ActivateUser(ctx, params)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// UserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UserProfile(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserProfile(ctx)
	return err
}

// UpdateUserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserProfile(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUserProfile(ctx)
	return err
}

// RegisterUser converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/storage/file", wrapper.CreateFile)
	router.POST(baseURL+"/user/activate", wrapper.ActivateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/profile", wrapper.UserProfile)
	router.PATCH(baseURL+"/user/profile", wrapper.UpdateUserProfile)
	router.POST(baseURL+"/user/register", wrapper.RegisterUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/cNhD9KwLbo2Btkh4K3dyiLtIWaOAP9GAsAloca5lKJD0cuTUM/feCpL52RUVN",
	"kHXsorddDjnz5s3jcPTICl0brUCRZfkjs8UOau5//oSo0f0wqA0gSfDL0C/TgwGWM0soVcnalNVgLS8h",
	"YmtThnDXSATB8uthY9o526b9AX3zAQpyzs5kBZd+8ZGBamp3Ttbh1L0UoCenRggXxKmxc9CfDC0G6cpU",
	"mgsH7BzuGrA0j3MrK1C8hig/1KXzLcIty9k32Uh91vGeDWkfAhs8d37WAFqjlYVPRChFdNkgWFkqEO8b",
	"rNY5lIKlU7z7x5eBj8XrC25ACRchZY3fAd4zlxWIaPmvLOBvupRqsUBQc1nFk+TW/qVRrOcXfExORFMa",
	"oSyXAi29XyxGxT9mJf0nqHWsYVs6jTX1vIT8HWpXwDlmLgSCtVFIy9yuZOrv9YK21nio9U0H9N8VbYGI",
	"wVE6pDjFtcLTlRGclrvCiyItmuc5lNIScpJaPW2an5nI59znRWkMriIqmSujTZmFokFJDxeuqwdyboAj",
	"4GlDu/HfmcaaE8vZL39csjS8vc5TsLLB847IsNY5lupW+4QkubTZzzo5ffc2uYTaVJz82whopVYsZ69O",
	"Nicbx4Q2oLiRLGdvTjYnr31CtPOoMksaeQnZcNt1qKwAW6A0FFz9iMAJkrOQuqu5V8JbMdg6EwZt/KDF",
	"g/NSaEWgvENuTCULfyz7YLUah421J3H+7Lb7FSRswC+ERusTe73ZHAVA18s9gn2Ofv+V+bVb3lT0xWKH",
	"ISwSrlHwt4GCQCTQ7Rl1x/Jrp0teWqfvi1BjtnVbssYCZrwgee8Es1jy025H4q7/rOi9tTMajrwGAnTx",
	"Dj1d7iDp4kmtkv5Fks521wA+sJSFCz68ViM3hzd3e8Q6d/PHYm2/+4KxFut6w0WCvc5dzDdPHvM5atgL",
	"bSLgyo1Wy+r1k1dcut7UWY7Srg5n0EjiAV6/4Ul72WwsfVGt7FAGZpxTS4jowO1P+mH2UAnTQffIlPdh",
	"nj/Z+5PK9bads+/nh2L3cbaTMBPPSffLh9Qf5xpGp/MIJxHcX+1y/qeUMtxT9N8PgMsd+7zbEW/avfXI",
	"fTv2mRNhZrrtqwjl/0nl+U8q65fFAt73I7P/jvcfenmWVbrg1U5byr/fbDYZNzK7f8XabftPAAAA//8A",
	"M6sirhUAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
