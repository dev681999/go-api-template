// Package openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Status defines model for Status.
type Status struct {
	Message string `json:"message"`
}

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UserLoginResponse defines model for UserLoginResponse.
type UserLoginResponse struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Token     string `json:"token"`
}

// UserRegistrationRequest defines model for UserRegistrationRequest.
type UserRegistrationRequest struct {
	Address   string `json:"address"`
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Mobile    string `json:"mobile"`
	Password  string `json:"password"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody UserLoginRequest

// RegisterUserJSONBody defines parameters for RegisterUser.
type RegisterUserJSONBody UserRegistrationRequest

// LoginUserRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// RegisterUserRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody RegisterUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /user/login)
	LoginUser(ctx echo.Context) error

	// (POST /user/register)
	RegisterUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// RegisterUser converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.POST(baseURL+"/user/register", wrapper.RegisterUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVUW/TQAz+K5XhMWqy8YLyNiRAAyRQN8RDVaFr4qY3krub7QyqKf8d3V3aZmq6IrEJ",
	"8dRr7Hz+bH/35R4K2zhr0AhDfg9crLFR4fiWyJI/OLIOSTSGx4Ut0f/KxiHkoI1ghQRdAg0yq2oYZCFt",
	"Kui6BAhvW01YQj6PEPv8RbLNt8sbLMRjXYmSlg+r/3GNx8C/MtInW2kzw9sWWQ7LYKN0PVIkAaeYf1oq",
	"TzOIGIM3TlBhZw3jIZeVJpbvRjU4SqhWj0XF/kBzmmtMS4a1hsjHmM+w0iykRNvjs1RlScg8Su/4nP+q",
	"68YudY1PtL8jMxlA7Qomu2YPJ9YlwFi0pGVz5S9ZHM4SFSFdtLLe/3tnqVECOXz4dg1JvJIeKUZhh7wW",
	"cdB5YG1WNjSkxbcN7+3k4svl5BobVyvxvO6QWFsDOZxNs2nmJ2EdGuU05PBqmk3PQ0OyDqzSlpHS2usy",
	"7NPGvZbIBWknESjIduJlAAEsyuCy3Ib6CEVdvLHlJtqHETQBTjlX6yK8ld6wNXv/8aeXhCvI4UW6N6i0",
	"d6f04AKHKYzR2yYMVyvUYth1vHGh4/MsezJ20ThHKH3+COHZSrW1PH+51uAvh4VgOcE+Z69ByOdeo6pi",
	"r/Wwq4WPx9VTuNhIx7c/6zPGBbCNPrMGxvxnZBDDtH+iiP5r9l9K4mHCQ8eaL7qFD5O3lxBtqe6dKU/T",
	"2haqXluW/HWWZalyOr07g27R/Q4AAP//mt8va3YIAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
